/*
 * generated by Xtext
 */
package eu.supersede.dynadapt.dsl.serializer;

import com.google.inject.Inject;
import eu.supersede.dynadapt.dsl.aspect.Aspect;
import eu.supersede.dynadapt.dsl.aspect.AspectPackage;
import eu.supersede.dynadapt.dsl.aspect.Composition;
import eu.supersede.dynadapt.dsl.aspect.Pointcut;
import eu.supersede.dynadapt.dsl.services.AspectGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class AspectSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AspectGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AspectPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AspectPackage.ASPECT:
				sequence_Aspect(context, (Aspect) semanticObject); 
				return; 
			case AspectPackage.COMPOSITION:
				sequence_Composition(context, (Composition) semanticObject); 
				return; 
			case AspectPackage.POINTCUT:
				sequence_Pointcut(context, (Pointcut) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Aspect returns Aspect
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         feature=[Feature|QualifiedName] 
	 *         advice=[Model|QualifiedName] 
	 *         pointcuts+=Pointcut 
	 *         pointcuts+=Pointcut* 
	 *         compositions+=Composition 
	 *         compositions+=Composition*
	 *     )
	 */
	protected void sequence_Aspect(ISerializationContext context, Aspect semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Composition returns Composition
	 *
	 * Constraint:
	 *     (name=ID feature_enabled=EBOOLEAN jointpointRole=[Stereotype|QualifiedName]? advice=[Stereotype|QualifiedName]? action=Action)
	 */
	protected void sequence_Composition(ISerializationContext context, Composition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Pointcut returns Pointcut
	 *
	 * Constraint:
	 *     (name=ID pattern=[Pattern|QualifiedName] role=[Stereotype|QualifiedName]?)
	 */
	protected void sequence_Pointcut(ISerializationContext context, Pointcut semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
